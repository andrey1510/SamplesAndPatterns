
//////////////     Sample of Constructor      ///////////////

// A Java constructor is special method that is called when an object is instantiated.

public class Constructor {

    public Constructor() {}  // Constructor has the same name as class, no return type, no modifiers other than accessibility.
                             // This constructor is No-argument constructor.
}

//////////////   Sample of implicit declaration of Default Constructor     //////////////

class DefaultConstructor {
    int i;
    public static void main(String[] args) {

        // Sample of DefaultConstructor
        DefaultConstructor obj = new DefaultConstructor();  // Default constructor will be generated by the compiler.
                                  // If any manually created constructor exists, compiler will not generate Default constructor.

        System.out.println("Default constructor called: " + obj.i);   // int i was initialized by default constructor with default value.
    }
}


//////////////    Samples of Parametrized, Overloaded, No-argument, Chained constructors    //////////////

class Furniture {
    double weight;
    char grade;
    int quantity;

    // Sample of Parametrized constructor.
    public Furniture(double w, char g, int q) {
        weight=w;                   // Parameters can  be used to initialize fields of class (also similar names with "this" keyword may be used).
        grade=g;
        quantity = q;
        System.out.println("Parametrized constructor is called:");
    }

    // Sample of Overloaded constructor
    public Furniture(double w) {   // signature (name + parameters) differs from signature of the constructor above.
        weight=w;
        System.out.println("Overloaded constructor is called:");
    }

    // Sample of necessity of  No-argument constructor in case any parametrized constructor is present
    public Furniture() {      /* If any parametrized constructor is present, no instance may  be created using
                                             default constructor without manually added No-argument constructor. */
        System.out.println("Default constructor is called:");
    }

    // Sample of Constructor chaining within the same class
    public Furniture(double w, char g) {      // chained with previous constructor
        this (w);                             // this() keyword must always be the first line of the constructor.
        System.out.println("Constructor chaining within the same class:");
    }

}

class Table extends Furniture {
    int legQuantity;

    // Sample of chaining constructor from the parent class
    public Table(double w, char g, int q, int l) {   // chained with 3-args constructor
        super(w, g, q);                      // super() must always be the first line of the constructor.
        legQuantity = l;
        System.out.println("Chaining constructor from the parent class:");
    }
}

// Test for all constructors (except for default constructor)
class TestConstructors {
    public static void main(String[] args) {

        //Instantiation of object to call constructor with 3 parameters.
        Furniture f1 = new Furniture(45.6, 'A',3);
        System.out.printf("Furniture has weight %s, quality grade %s, quantity %s%n", f1.weight, f1.grade, f1.quantity);

        //Instantiation of object to call constructor with 1 parameter (overloaded).
        Furniture f2 = new Furniture(108.2);
        System.out.printf("Furniture has weight %s%n", f2.weight);

        //Instantiation of object to call No-argument constructor
        Furniture f4 = new Furniture();
        System.out.printf("Default values of: weight is %s, quality grade is %s, quantity is %s%n",f4.weight,f4.grade,f4.quantity);

        //Instantiation of object to call chained constructor within same class.
        Furniture f3 = new Furniture(108.2, 'B');
        System.out.printf("Furniture has weight %s, quality grade %s%n",f3.weight,f3.grade);

        // Instantiation of object to call chained constructor from other class.
        Table t1 = new Table(30.1, 'B', 2, 4);
        System.out.printf("Table has has weight %s, quality grade %s, quantity %s, leg number %s%n", t1.weight, t1.grade, t1.quantity, t1.legQuantity);

    }
}